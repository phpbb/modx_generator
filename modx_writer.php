<?php
/**
 *
 * @package MODX Generator
 * @version $Id$
 * @copyright (c) tumba25
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License v2
 *
 */

/**
 * Writes the diff to a modx install file
 */
class modx_writer extends XMLWriter
{
	/**
	 * These vars needs to be set by the caller.
	 */
	var $modx_version = 'modx-1.2.3.xsd';  // The current MODX version.

	/**
	 * Starts the xml and writes the header.
	 */
	function modx_writer()
	{
		$this->openMemory();
		$this->setIndent(true);
		$this->setIndentString("\t");

		// The header
		$this->startDocument('1.0', 'UTF-8', 'yes');
		$this->writePi('xml-stylesheet', 'type="text/xsl" href="modx.prosilver.en.xsl"');
		$this->writeComment('NOTICE: Please open this file in your web browser. If presented with a security warning, you may safely tell it to allow the blocked content.');
		$this->writeComment('For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD.\nAlthough MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD.\nNo support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/');

		// <mod>
		$this->startElement('mod');
		$this->writeAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
		$this->writeAttribute('xmlns', 'http://www.phpbb.com/mods/xml/' . $this->modx_version);

		// <header>
		$this->startElement('header');

		// <meta>
		$this->write_element('meta', '', array(
			'name' => 'generator',
			'content' => 'MODX file generated by MODX Generator by tumba25',
		), false, false);

		// </header>
		$this->endElement();
		$this->startElement('action-group');
	}

	/**
	* Writes the edits to xml
	*
	* @param $name, the tag name.
	* @param $text, text for the tag.
	* @param $attributes, attributes if the are any.
	*/
	public function write_element($name, $text, $attributes = false)
	{
		if ($text == '' && $attributes == false)
		{
			// nothing to write
			return;
		}

		$this->startElement($name);

		if ($attributes != false)
		{
			foreach ($attributes as $key => $value)
			{
				if ($value != '')
				{
					$this->writeAttribute($key, $value);
				}
			}
		}

		if ($text != '')
		{
			// We need to check for <![CDATA[ ]]> in the strings.
			// Accoring to DavidIQ this should work.
			// Can't use a regular expresion for this, there might be only ]]> in the files.
			$find = array(
				'<![CDATA[',
				']]>',
				'&lt;![CDATA[',
				']]&gt;');
			$replace = array(
				'&lt;![CDATA[',
				']]&gt;',
				']]>&lt;![CDATA[<![CDATA[',
				']]>]]&gt;<![CDATA[');
			$text = str_replace($find, $replace, $text);

			$this->writeCdata($text);
		}
		$this->endElement();
	}

	/**
	 * Write the diff to the modx file.
	 *
	 * @param $file, file name.
	 * @param $file_diff, the famous diff-
	 */
	public function generate_xml($file, $file_diff)
	{
		$last_change = 0;

		// On Windows the directory separator will be \, so we need to replace that.
		$file = str_replace('\\', '/', $file);

		$this->startElement('open');
		$this->writeAttribute('src', $file);

		foreach ($file_diff as $line => $value)
		{
			if (is_array($value))
			{
				if (isset($value['find']))
				{
					$this->startElement('edit');

					// Both inlines and normal edits needs to start with a FIND
					$this->write_element('find', $value['find'][0]);
					if (isset($value['find'][1]))
					{
						$this->write_element('find', $value['find'][1]);
					}
				}

				if ($value['type'] == INLINE)
				{
					// Inline edit
					foreach ($value['changes'] as $change)
					{
						switch($change['add-type'])
						{
							case ADD_BEFORE:
								$change_type = 'before-add';
							break;

							case REPLACE:
								$change_type = 'replace-with';
							break;

							default:
								$change_type = 'after-add';
							break;
						}
						if (isset($change['inline-find']))
						{
							$this->startElement('inline-edit');
							$this->write_element('inline-find', $change['inline-find'][0]);
							if (isset($change['inline-find'][1]))
							{
								// In-line replaces has  two finds.
								$this->write_element('inline-find', $change['inline-find'][1]);
							}
						}
						$this->write_element('inline-action', $change['add'], array('type' => $change_type));
						if (isset($change['close']))
						{
							$this->endElement();
						}
					}
				}
				else if ($value['type'] == EDIT)
				{
					// Edit
					if (isset($value['add']))
					{
						switch($value['add-type'])
						{
							case ADD_BEFORE:
								$change_type = 'before-add';
							break;

							case REPLACE:
								$change_type = 'replace-with';
							break;

							default:
								$change_type = 'after-add';
							break;
						}
						$this->write_element('action', $value['add'], array('type' => $change_type));
					}
					else if (!empty($value['del']))
					{
						$this->write_element('action', '', array('type' => 'replace-with'));
					}
				}
				else
				{
					// Eh?
				}

				if (isset($value['close']))
				{
					$this->endElement();
				}
			}
		}

		$this->endElement();
	}

	/**
	 * Closes the file and either returns the modx or writes it to file
	 */
	public function modx_close($out_file = '')
	{
		$this->endElement();
		$this->endElement();

		$out_string = $this->outputMemory();

		if ($out_file)
		{
			file_put_contents($out_file, $out_string);
		}
		else
		{
			echo $out_string . "\n";
		}
	}

}

?>